# -*- coding: utf-8 -*-
"""Bug Prediction Pipeline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Flzu55JI8H9uaNC_0ZWBhsun3DQxWL1Q

Install python weka and other important libraries
"""

import os
import sys
sys.path
sys.path.append("/usr/lib/jvm/java-11-openjdk-amd64/bin/")
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-11-openjdk-amd64/"
!apt-get install build-essential python3-dev
!apt-get install python3-pil python3-pygraphviz
!apt install openjdk-11-jdk
!pip3 install javabridge --no-cache-dir
!pip3 install python-weka-wrapper3 --no-cache-dir

import weka.core.jvm as jvm
jvm.start(packages=True)

"""Read CSV files from Google Drive. Add the csv files under 
"data/bugs/hadoop.csv"
"""

import os
import pandas as pd
import numpy as np
from google.colab import drive
from weka.core.converters import Loader, TextDirectoryLoader
from weka.classifiers import Classifier, SingleClassifierEnhancer, MultipleClassifiersCombiner, FilteredClassifier, \
    PredictionOutput, Kernel, KernelClassifier
from weka.classifiers import Evaluation
from weka.core.classes import Random
import weka.plot.classifiers as plot_cls
import weka.plot.graph as plot_graph
drive.mount('/content/gdrive')

corpus_name = 'data/bugs/matrixDataNoLabels_cloud_concurrency_bugs.csv'
corpus = os.path.join("/content/gdrive/My Drive", corpus_name)

data_csv = pd.read_csv(corpus)
target_count = data_csv['bug'].value_counts()
print('Bug "False":', target_count[0])
print('Bug "True":', target_count[1])
print('Proportion:', round(target_count[0] / target_count[1], 2), ': 1')

target_count.plot(kind='bar', title='Count (target)');

"""Dealing with data imbalance"""

from imblearn.over_sampling import SMOTE

X = data_csv[["loc","wmc","dit","cbo","rfc","lcom"]]
y = data_csv[["bug"]]

smote = SMOTE(random_state=0)
X_resampled, y_resampled = smote.fit_sample(X, y)

X_resampled = pd.DataFrame(X_resampled, columns=X.columns)
y_resampled = pd.DataFrame(y_resampled, columns=y.columns)

sampled = pd.merge_asof(X_resampled,y_resampled,right_index=True,left_index=True)
print(sampled)

#corpus_name = 'data/bugs/resampled.csv'
#corpus = os.path.join("/content/gdrive/My Drive", corpus_name)

#sampled.to_csv(corpus,index = False)

loader = Loader(classname="weka.core.converters.CSVLoader")
data = loader.load_file(corpus)
data.class_is_last()

"""Naive Bayes Classifier for Bug Prediction"""

classifier = Classifier(classname="weka.classifiers.bayes.NaiveBayes")
pred_output = PredictionOutput(classname="weka.classifiers.evaluation.output.prediction.PlainText", options=["-distribution"])
evaluation = Evaluation(data)
evaluation.crossvalidate_model(classifier, data, 10, Random(42), output=pred_output)
plot_cls.plot_roc(evaluation, title="ROC bugs",class_index=range(0, data.class_attribute.num_values), wait=False)
plot_cls.plot_prc(evaluation, title="PRC bugs - NaiveBayes",class_index=range(0, data.class_attribute.num_values), wait=False)

"""Performance Metrics - Naive Bayes Classifier"""

print(evaluation.summary())
print(evaluation.class_details())
print(evaluation.matrix())

print("confusionMatrix: " + str(evaluation.confusion_matrix))
print("fMeasure: " + str(evaluation.f_measure(1)))
print("precision: " + str(evaluation.precision(1)))
print("recall: " + str(evaluation.recall(1)))

"""Random Forest Classifier"""

classifier2 = Classifier(classname="weka.classifiers.trees.RandomForest")
evaluation2 = Evaluation(data)
evaluation2.crossvalidate_model(classifier2, data, 10, Random(42))
plot_cls.plot_roc(evaluation2, title="ROC bugs",class_index=range(0, data.class_attribute.num_values), wait=False)
plot_cls.plot_prc(evaluation2, title="PRC bugs - RandomForest",class_index=range(0, data.class_attribute.num_values), wait=False)

"""Performance Evaluation Metrics - Random Forest"""

print(evaluation2.summary())
print(evaluation2.class_details())
print(evaluation2.matrix())

print("confusionMatrix: " + str(evaluation2.confusion_matrix))
print("fMeasure: " + str(evaluation2.f_measure(1)))
print("precision: " + str(evaluation2.precision(1)))
print("recall: " + str(evaluation2.recall(1)))

"""Logistic Classifier"""

classifier3 = Classifier(classname="weka.classifiers.functions.Logistic")
evaluation3 = Evaluation(data)
evaluation3.crossvalidate_model(classifier3, data, 10, Random(42))
plot_cls.plot_roc(evaluation3, title="ROC bugs",class_index=range(0, data.class_attribute.num_values), wait=False)
plot_cls.plot_prc(evaluation3, title="PRC bugs - Logistic",class_index=range(0, data.class_attribute.num_values), wait=False)

"""Pervormance Evaluation Metrics - Logistic"""

print(evaluation3.summary())
print(evaluation3.class_details())
print(evaluation3.matrix())

print("confusionMatrix: " + str(evaluation3.confusion_matrix))
print("fMeasure: " + str(evaluation3.f_measure(1)))
print("precision: " + str(evaluation3.precision(1)))
print("recall: " + str(evaluation3.recall(1)))

